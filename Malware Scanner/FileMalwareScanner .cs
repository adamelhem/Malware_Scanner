using HtmlAgilityPack;
using Malware_Scanner;
using System.Text;

public class FileMalwareScanner : IFileHandleStrategy
{
    string _targetPath ;
    IFileHandler _fileHandler = new FileHandler();

    public FileMalwareScanner(string targetPath = @"C:\Files Scanner\output")
    {
        _targetPath = targetPath;
    }

    void IFileHandleStrategy.OnCreated(string fullPath)
    {
        ExecuteFileScanAsync(fullPath);
    }

    private async Task ExecuteFileScanAsync(string fullPath)
    {
        await Task.Run(() => {
            var data = _fileHandler.ReadFile(fullPath);
            var cleanData = removeMalwaresData(data);
            var newPath = Path.Combine(_targetPath, fullPath.Split('\\').LastOrDefault());
            _fileHandler.WriteFile(newPath, cleanData);
            _fileHandler.DeleteFile(fullPath);
        });
    }

    private string removeMalwaresData(string data)
    {
        return cleanLinks(data);
    }

    private string cleanLinks(string data)
    {
        var newData = "";
        var doc = new HtmlDocument();
        doc.LoadHtml(data);
        var anchor = doc.DocumentNode.SelectSingleNode("//a");
        if (anchor != null)
        {
            var link = anchor.Attributes["href"].Value;
            var title = anchor.FirstChild.InnerHtml;
            if(link!=title)
            {
               newData = data.Replace(link,"  " + title);
            }
            Console.WriteLine(link);
        }
        return newData;
    }

    void IFileHandleStrategy.OnChanged(string fullPath)
    {
        ExecuteFileScanAsync(fullPath);
    }

    void IFileHandleStrategy.OnDeleted(string fullPath)
    {
        Console.WriteLine("OnDeleted");
    }

    void IFileHandleStrategy.OnRenamed(string fullPath)
    {
        Console.WriteLine("OnRenamed");
    }

}